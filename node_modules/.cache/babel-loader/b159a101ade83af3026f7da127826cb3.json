{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ANAR\\\\Desktop\\\\Soltanov\\\\soltanov\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\nconst API_KEY = \"cf2ff9413ab14d37b65c832d3c428f67\";\n\nclass AppSoltanov extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temp: undefined,\n      city: undefined,\n      country: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      pressure: undefined,\n      error: undefined\n    };\n\n    this.gettingWeather = async e => {\n      e.preventDefault();\n      let city = e.target.elements.city.value;\n\n      if (city) {\n        const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n        const data = await api_url.json();\n        console.log(data);\n        let sunriseInSec = data.sys.sunrise;\n        let sunriseDate = new Date(sunriseInSec * 1000);\n        let timeSunrise = sunriseDate.toLocaleTimeString();\n        let sunsetInSec = data.sys.sunset;\n        let sunsetDate = new Date(sunsetInSec * 1000);\n        let timeSunset = sunsetDate.toLocaleTimeString(); //date.setTime(sunset);\n        //var sunset_date = date.getHours() + \":\" + date.getMinutes() +\n        //\":\" + date.getSeconds();\n\n        this.setState({\n          temp: parseFloat(data.main.temp.toFixed(1)),\n          city: data.name,\n          country: data.sys.country,\n          sunrise: timeSunrise,\n          sunset: timeSunset,\n          pressure: data.main.pressure,\n          error: undefined\n        });\n      } else {\n        this.setState({\n          temp: undefined,\n          city: undefined,\n          country: undefined,\n          sunrise: undefined,\n          sunset: undefined,\n          pressure: undefined,\n          error: \"Введите название города\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xs-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Info, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xs-7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      weatherMethod: this.gettingWeather,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Weather, {\n      temp: this.state.temp,\n      city: this.state.city,\n      country: this.state.country,\n      sunrise: this.state.sunrise,\n      sunset: this.state.sunset,\n      error: this.state.error,\n      pressure: this.state.pressure,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }))))));\n  }\n\n}\n\nexport default AppSoltanov;","map":{"version":3,"sources":["C:/Users/ANAR/Desktop/Soltanov/soltanov/src/App.js"],"names":["React","Info","Form","Weather","API_KEY","AppSoltanov","Component","state","temp","undefined","city","country","sunrise","sunset","pressure","error","gettingWeather","e","preventDefault","target","elements","value","api_url","fetch","data","json","console","log","sunriseInSec","sys","sunriseDate","Date","timeSunrise","toLocaleTimeString","sunsetInSec","sunsetDate","timeSunset","setState","parseFloat","main","toFixed","name","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Info from \"./components/info\";\r\nimport Form from \"./components/form\";\r\nimport Weather from \"./components/weather\";\r\n\r\nconst API_KEY = \"cf2ff9413ab14d37b65c832d3c428f67\";\r\n\r\n\r\nclass AppSoltanov extends React.Component {\r\n\r\n  state = {\r\n    temp: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    sunrise: undefined,\r\n    sunset: undefined,\r\n    pressure: undefined,\r\n    error: undefined\r\n  }\r\n\r\n  gettingWeather = async (e) => {\r\n    e.preventDefault();\r\n    let city = e.target.elements.city.value;\r\n\r\n    if(city) {\r\n      const api_url = await\r\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\r\n      const data = await api_url.json();\r\n      console.log(data);\r\n\r\n      let sunriseInSec = data.sys.sunrise;\r\n      let sunriseDate = new Date(sunriseInSec * 1000);\r\n      let timeSunrise = sunriseDate.toLocaleTimeString();\r\n\r\n      let sunsetInSec = data.sys.sunset;\r\n      let sunsetDate = new Date(sunsetInSec * 1000);\r\n      let timeSunset = sunsetDate.toLocaleTimeString();\r\n      //date.setTime(sunset);\r\n      //var sunset_date = date.getHours() + \":\" + date.getMinutes() +\r\n      //\":\" + date.getSeconds();\r\n\r\n      this.setState({\r\n        temp: parseFloat((data.main.temp).toFixed(1)),\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        sunrise: timeSunrise,\r\n        sunset: timeSunset,\r\n        pressure: data.main.pressure,\r\n        error: undefined\r\n        });\r\n      } else {\r\n        this.setState({\r\n          temp: undefined,\r\n          city: undefined,\r\n          country: undefined,\r\n          sunrise: undefined,\r\n          sunset: undefined,\r\n          pressure: undefined,\r\n          error: \"Введите название города\"\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"main\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-xs-5\">\r\n                <Info />\r\n              </div>\r\n              <div className=\"col-xs-7\">\r\n                <Form weatherMethod = {this.gettingWeather} />\r\n                <Weather\r\n                  temp={this.state.temp}\r\n                  city={this.state.city}\r\n                  country={this.state.country}\r\n                  sunrise={this.state.sunrise}\r\n                  sunset={this.state.sunset}\r\n                  error={this.state.error}\r\n                  pressure={this.state.pressure}\r\n              />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppSoltanov;\r\n"]},"metadata":{},"sourceType":"module"}