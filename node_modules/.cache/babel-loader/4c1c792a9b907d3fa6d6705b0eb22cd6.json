{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ANAR\\\\Desktop\\\\Soltanov\\\\soltanov\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\nconst API_KEY = \"cf2ff9413ab14d37b65c832d3c428f67\";\n\nclass AppSoltanov extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temp: undefined,\n      city: undefined,\n      country: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      pressure: undefined,\n      error: undefined\n    };\n\n    this.gettingWeather = async e => {\n      e.preventDefault();\n      var city = e.target.elements.city.value;\n\n      if (city) {\n        const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n        const data = await api_url.json();\n        console.log(data);\n        var sunrise = data.sys.sunrise;\n        var date = new Date(sunsetInSec * 1000);\n        var timeSunrise = date.toLocaleTimeString();\n        var sunsetInSec = data.sys.sunset;\n        var date = new Date(sunsetInSec * 1000);\n        var timeSunset = date.toLocaleTimeString(); //date.setTime(sunset);\n        //var sunset_date = date.getHours() + \":\" + date.getMinutes() +\n        //\":\" + date.getSeconds();\n\n        this.setState({\n          temp: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          sunrise: timeSunrise,\n          sunset: timeSunset,\n          pressure: data.main.pressure,\n          error: \"\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Info, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Form, {\n      weatherMethod: this.gettingWeather,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Weather, {\n      temp: this.state.temp,\n      city: this.state.city,\n      country: this.state.country,\n      sunrise: this.state.sunrise,\n      sunset: this.state.sunset,\n      error: this.state.error,\n      pressure: this.state.pressure,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default AppSoltanov;","map":{"version":3,"sources":["C:/Users/ANAR/Desktop/Soltanov/soltanov/src/App.js"],"names":["React","Info","Form","Weather","API_KEY","AppSoltanov","Component","state","temp","undefined","city","country","sunrise","sunset","pressure","error","gettingWeather","e","preventDefault","target","elements","value","api_url","fetch","data","json","console","log","sys","date","Date","sunsetInSec","timeSunrise","toLocaleTimeString","timeSunset","setState","main","name","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Info from \"./components/info\";\r\nimport Form from \"./components/form\";\r\nimport Weather from \"./components/weather\";\r\n\r\nconst API_KEY = \"cf2ff9413ab14d37b65c832d3c428f67\";\r\n\r\n\r\nclass AppSoltanov extends React.Component {\r\n\r\n  state = {\r\n    temp: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    sunrise: undefined,\r\n    sunset: undefined,\r\n    pressure: undefined,\r\n    error: undefined\r\n  }\r\n\r\n  gettingWeather = async (e) => {\r\n    e.preventDefault();\r\n    var city = e.target.elements.city.value;\r\n\r\n    if(city) {\r\n      const api_url = await\r\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\r\n      const data = await api_url.json();\r\n      console.log(data);\r\n\r\n      var sunrise = data.sys.sunrise;\r\n      var date = new Date(sunsetInSec * 1000);\r\n      var timeSunrise = date.toLocaleTimeString();\r\n\r\n      var sunsetInSec = data.sys.sunset;\r\n      var date = new Date(sunsetInSec * 1000);\r\n      var timeSunset = date.toLocaleTimeString();\r\n      //date.setTime(sunset);\r\n      //var sunset_date = date.getHours() + \":\" + date.getMinutes() +\r\n      //\":\" + date.getSeconds();\r\n\r\n      this.setState({\r\n        temp: data.main.temp,\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        sunrise: timeSunrise,\r\n        sunset: timeSunset,\r\n        pressure: data.main.pressure,\r\n        error: \"\"\r\n        });\r\n      }\r\n    }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Info />\r\n        <Form weatherMethod = {this.gettingWeather} />\r\n        <Weather\r\n          temp={this.state.temp}\r\n          city={this.state.city}\r\n          country={this.state.country}\r\n          sunrise={this.state.sunrise}\r\n          sunset={this.state.sunset}\r\n          error={this.state.error}\r\n          pressure={this.state.pressure}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppSoltanov;\r\n"]},"metadata":{},"sourceType":"module"}